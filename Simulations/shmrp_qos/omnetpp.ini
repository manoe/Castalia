# ****************************************************************************
# *  Copyright: National ICT Australia,  2007 - 2010                         *
# *  Developed at the ATP lab, Networked Systems research theme              *
# *  Author(s): Athanassios Boulis, Yuriy Tselishchev                        *
# *  This file is distributed under the terms in the attached LICENSE file.  *
# *  If you do not find this file, copies can be found by writing to:        *
# *                                                                          *
# *      NICTA, Locked Bag 9013, Alexandria, NSW 1435, Australia             *
# *      Attention:  License Inquiry.                                        *
# *                                                                          *
# ***************************************************************************/

[General]

# =============================================
# Always include the main Castalia.ini file
# =============================================
include ../Parameters/Castalia.ini


sim-time-limit = 20min #2h #20min
#sim-time-limit = 3min

#seed-set = ${runnumber}

#seed-set = 1666948206
#seed-set = 166694820
#seed-set  = 1670924676

SN.field_x = 160	# meters
SN.field_y = 160	# meters

# These tests include 3 nodes each, coordinates will be specified manually
SN.numNodes = 64
#SN.deployment = "[0..63]->randomized_8x8"
SN.deployment = "[0..63]->8x8"
#SN.node[0].xCoor = 160
#SN.node[0].yCoor = 160
#SN.node[63].xCoor = 0
#SN.node[63].yCoor = 0

SN.node[*].MobilityManagerName = "NoMobilityManager"

# important wireless channel switch to allow mobility
SN.wirelessChannel.onlyStaticNodes = true
#SN.wirelessChannel.sigma = 0
#SN.wirelessChannel.bidirectionalSigma = 0

# Choose a radio and set the Tx power to a low value so
# that node's mobility has a better effect on connectivity
SN.node[*].Communication.Radio.RadioParametersFile = "../Parameters/Radio/CC2420.txt"
SN.node[*].Communication.Radio.TxOutputPower = "0dBm"
#SN.node[*].Communication.Radio.TxOutputPower = ${TxPower="0dBm","-1dBm","-3dBm","-5dBm","-7dBm", "-10dBm", "-15dBm"}

#SN.node[1].Communication.Radio.TxOutputPower = ${TxPower="-5dBm", "-10dBm", "-15dBm"}

# These tests use big packets (2kb) to show interference clearly
# This requires to set the max pkt size in all communication layers
#SN.node[*].Communication.Routing.maxNetFrameSize = 200
#SN.node[*].Communication.MAC.macMaxPacketSize = 200
#SN.node[*].Communication.Radio.maxPhyFrameSize = 200
SN.node[*].Communication.MAC.macBufferSize = 64

# Throughput test application is used to send 2000-byte
# packets to node 0 (which by default is the receiving 
# node for this app).5 packets per second will be send 
SN.node[*].ApplicationName = "ThroughputTest"
#SN.node[*].ApplicationName = "ForestFire"

#SN.node[*].Application.packet_rate = ${rate=0.05,0.1,0.2,0.5,1,2}
SN.node[*].Application.packet_rate = 0.5
SN.node[*].Application.startupDelay = 130 

SN.node[0].Application.isSink = true
#SN.node[9].Application.isMaster = true
#SN.node[18].Application.isMaster = true
#SN.node[27].Application.isMaster = true
#SN.node[36].Application.isMaster = true
#SN.node[45].Application.isMaster = true
#SN.node[54].Application.isMaster = true
#SN.node[63].Application.isMaster = true

SN.node[*].Application.constantDataPayload = 20
SN.node[*].Application.startupRandomization = 20
#SN.node[*].Application.packetRepetition = 0 #${Repetition=0,1,2,3,4,5,6,7,8,9,10,20}
SN.wirelessChannel.pathLossExponent = 2.3
#SN.wirelessChannel.temporalModelParametersFile = "../Parameters/WirelessChannel/BANmodels/TemporalModel.txt"
SN.node[*].Communication.Radio.collisionModel = 2

SN.node[*].Communication.MACProtocolName = "TMAC"
SN.node[*].Communication.MAC.collisionResolution = 1 # ${CA=0,1,2}
#SN.node[*].Communication.MAC.maxTxRetries = 2  # ${maxTxRetries=1,2,3,4,5,6,7,8,9,10,11}
#SN.node[*].Communication.MAC.allowSinkSync = false
#SN.node[*].ResourceManager.sigmaCPUClockDrift = 0.00003

SN.node[*].Communication.RoutingProtocolName = "shmrp"
SN.node[*].Communication.Routing.f_rresp_required = true
SN.node[*].Communication.Routing.f_restart_learning = true
SN.node[*].Communication.Routing.t_l = 1
SN.node[*].Communication.Routing.f_random_t_l = true
SN.node[*].Communication.Routing.f_random_t_l_sigma = 0.08
iN.node[*].Communication.Routing.f_rinv_table_admin = "erase_on_round"
SN.node[*].Communication.Routing.ring_radius = 3
#SN.node[*].Communication.Routing.t_est = 2
SN.node[*].Communication.Routing.f_interf_ping = true
SN.node[*].Communication.Routing.f_round_keep_pong = true
SN.node[*].Communication.Routing.f_cost_function = "hop_pdr_and_interf"
#SN.node[*].Communication.Routing.f_static_routing = true
#SN.node[*].Communication.Routing.f_rand_ring_hop = true
#SN.node[*].Communication.Routing.f_cf_after_rresp = ${CFA=false,true}
SN.node[*].Communication.Routing.f_cf_after_rresp = true
SN.node[*].Communication.Routing.f_measure_w_rreq = true
SN.node[*].Communication.Routing.f_meas_rreq_count = 10 # ${RRC=1,2,5,10}
SN.node[*].Communication.Routing.f_calc_max_hop = true
SN.node[*].Communication.Routing.f_qos_pdr = 0.9
#SN.node[*].Communication.Routing.t_meas = 4
SN.node[*].Communication.Routing.f_rt_recalc_w_emerg = true 
SN.node[*].Communication.Routing.f_rt_reroute_pkt = true 
SN.node[*].Communication.Routing.f_second_learn = "broadcast"
SN.node[*].Communication.Routing.f_t_sec_l = 2
SN.node[*].Communication.Routing.f_t_sec_l_start = 500
#SN.node[*].Communication.RoutingProtocolName = "flooding"
#SN.node[*].Communication.RoutingProtocolName = "MultipathRingsRouting"
#SN.node[*].Communication.Routing.repeat = ${repeat=1,2,3,4,5}
#SN.node[*].Communication.Routing.repeat = 1
#SN.node[*].Application.collectTraceInfo = true
SN.node[0].Application.periodic_measurement = true


#SN.node[*].Communication.MAC.collectTraceInfo = true
#SN.node[*].Communication.Radio.collectTraceInfo = true

#SN.wirelessChannel.collectTraceInfo = true
SN.node[*].Communication.Routing.collectTraceInfo = true

SN.physicalProcess[*].collectTraceInfo = true
SN.node[*].SensorManager.registerNode = true
SN.physicalProcessName = "WildFirePhysicalProcess"
SN.physicalProcess[*].map_file = "bundle_small.bin"
SN.physicalProcess[*].map_scale = 1
SN.physicalProcess[*].no_map_file = true
SN.physicalProcess[*].wf_start_x_coord = 99 
SN.physicalProcess[*].wf_start_y_coord = 99
SN.physicalProcess[*].w_a = 0

SN.physicalProcess[*].ca_step_period = 120
SN.physicalProcess[*].seed = 10
SN.physicalProcess[*].ca_start_timer = 60000



# Nodes are moving, so seeing their location may be useful
# SN.node[*].MobilityManager.collectTraceInfo = true

# ==========================================================
# The default configuration sets node 0 to be mobile, while 
# sending nodes 1 and 2 are static. Receiving node 0 will 
# move in diagonal pattern, allowing it to receive packets 
# from node 1 and some time later from node 2. This will be
# clearly seen on the trace file and the collected output.
# ==========================================================

#SN.node[0].xCoor = 0
#SN.node[0].yCoor = 0
#SN.node[1].xCoor = 10
#SN.node[1].yCoor = 10
#SN.node[2].xCoor = 20  
#SN.node[2].yCoor = 20


#SN.node[0].MobilityManagerName = "LineMobilityManager"
#
#SN.node[0].MobilityManager.updateInterval = 100
#SN.node[0].MobilityManager.xCoorDestination = 200
#SN.node[0].MobilityManager.yCoorDestination = 200
#SN.node[1].MobilityManager.speed = 15


# =========================================================
# InterferenceTest1 shows how communication link between
# static nodes 0 and 1 is disrupted when mobile node 2
# passes between them.
# =========================================================

[Config t_l]
SN.node[*].Communication.Routing.t_l = 1


[Config InterferenceTest1]

SN.node[0].MobilityManagerName = "NoMobilityManager"
SN.node[1].MobilityManagerName = "NoMobilityManager"
SN.node[2].MobilityManagerName = "LineMobilityManager"

SN.node[0].xCoor = 10
SN.node[0].yCoor = 50

SN.node[1].xCoor = 0
SN.node[1].yCoor = 50

SN.node[2].xCoor = 5
SN.node[2].yCoor = 0

SN.node[2].MobilityManager.updateInterval = 100
SN.node[2].MobilityManager.xCoorDestination = 5
SN.node[2].MobilityManager.yCoorDestination = 100
SN.node[2].MobilityManager.speed = 5


# ===========================================================
# InterferenceTest2 is similar to InterferenceTest1, but
# this time node 2 approaches much closer to receiving node 0
# while node 1 is located further away. While node 1 is still 
# able to reach node 0 most of the time, when node 2 moves
# very close to the receiver, it's transmissions become
# stronger and node 0 is able to receive packets from node 2
# in spite of the fact that node 1 is still transmitting
# ===========================================================

[Config InterferenceTest2]

SN.node[0].MobilityManagerName = "NoMobilityManager"
SN.node[1].MobilityManagerName = "NoMobilityManager"
SN.node[2].MobilityManagerName = "LineMobilityManager"

SN.node[0].xCoor = 15
SN.node[0].yCoor = 50

SN.node[1].xCoor = 0
SN.node[1].yCoor = 50

SN.node[2].xCoor = 22
SN.node[2].yCoor = 0

SN.node[2].MobilityManager.updateInterval = 100
SN.node[2].MobilityManager.xCoorDestination = 22
SN.node[2].MobilityManager.yCoorDestination = 100
SN.node[2].MobilityManager.speed = 5


# =====================================================
# This cofiguration tests the CSInterrupt feature
# of the radio, as well as reads the RSSI value.
# In the trace output we see when the Carrier Sense 
# interrupt is received for different values of
# TX power and CCA threshold. Just two static nodes.
# =====================================================
[Config CSinterruptTest]

sim-time-limit = 1s

SN.node[*].Communication.Radio.carrierSenseInterruptEnabled = true

SN.numNodes = 2

SN.wirelessChannel.onlyStaticNodes = true
SN.node[0].MobilityManagerName = "NoMobilityManager"
SN.node[1].MobilityManagerName = "NoMobilityManager"

SN.node[0].xCoor = 10
SN.node[0].yCoor = 50
SN.node[0].zCoor = 0

SN.node[1].xCoor = 0
SN.node[1].yCoor = 50
SN.node[1].zCoor = 0

SN.node[*].Application.constantDataPayload = 200

SN.node[1].Communication.Radio.TxOutputPower = ${TxPower="-5dBm", "-10dBm", "-15dBm"}
SN.node[0].Communication.Radio.CCAthreshold = ${CCAthreshold=-95, -90, -85}


[Config varyInterferenceModel]
SN.node[*].Communication.Radio.collisionModel = ${InterfModel=0,1,2}

[Config seed]
seed-set = 0 

[Config rreq_meas]
SN.node[*].Communication.Routing.f_meas_rreq_count = 5

[Config qos_pdr]
SN.node[*].Communication.Routing.f_qos_pdr = 0.5

